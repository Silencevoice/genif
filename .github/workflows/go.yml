# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "*" ]       # Execute every push
  pull_request:
    branches: [ "*" ]       # Execute every PR
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22' ]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Verify dependencies
      run: go mod tidy && git diff --exit-code

    - name: Check code formatting
      run: gofmt -s -l .

    - name: Build
      run: go build -v ./...

    - name: Run tests for main module
      run: go test -coverprofile=cover_main.out ./...

    - name: Create go.work
      run: |
        go work init
        go work use .
        go work use ./examples/memory-store
    
    - name: Sync workspace
      run: go work sync

    - name: Test Examples
      working-directory: ./examples/memory-store
      run: |
        go work use ../../
        go test -coverprofile=cover_examples.out ./...
    - name: Combine coverage reports
      run: |
        echo "mode: set" > cover.out
        tail -n +2 cover_main.out >> cover.out
        tail -n +2 ./examples/memory-store/cover_examples.out >> cover.out
    - name: Generate HTML coverage report
      run: go tool cover -html=cover.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
